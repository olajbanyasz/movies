// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MovieCounter should rendered correctly 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <MovieCounter
    resultcounter={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "resultcounter": 1,
    },
    "ref": null,
    "rendered": Object {
      "instance": <div
        class="movie-counter"
      >
        1 movie found
      </div>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": "1 movie found",
        "className": "movie-counter",
      },
      "ref": null,
      "rendered": Array [
        "1 movie found",
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "resultcounter": 1,
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="movie-counter"
        >
          1 movie found
        </div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "1 movie found",
          "className": "movie-counter",
        },
        "ref": null,
        "rendered": Array [
          "1 movie found",
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
